// 1. Create a collection named orders
db.createCollection('orders')

// 2. Insert 3 orders
db.orders.insert(
    [{
        orderDate: new Date('2017-02-03'),
        orderTotal: 25,
        lineItems: [{unitPrice: 5, quantity: 5, productName: 'toilet paper'}]
    },
    {
        orderDate: new Date('2017-04-04'),
        orderTotal: 13,
        lineItems: [{unitPrice: 13, quantity: 1, productName: 'tampons'}]
    },
    {
        orderDate: new Date('2017-01-02'),
        orderTotal: 99,
        lineItems:[{unitPrice: 11, quantity: 9, productName: 'knife'}]
    }]
)

// 3. Find all orders; make them pretty
db.orders.find().pretty()

// 4. Find all orders with an orderDate that is after 1/31/2017
db.orders.find({orderDate: {$gt: new Date('2017-01-31')}})

// 5. Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
db.orders.update({orderDate: new Date('2017-02-03')}, {$set: {orderTotal: 63}})

// 6. Add another lineItem to the order from 4/4/2017
db.orders.update({orderDate: new Date('2017-04-04')}, {$push: {lineItems: {unitPrice: 2, quantity: 1, productName: 'fancy sauce'}}})

// 7. Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
db.orders.update({orderDate: new Date('2017-01-02')}, {$set: {"lineItem.0": {unitPrice: 55, quantity: 2, prouctName: 'transistor radio'}}})

// 8. Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $and
db.orders.find({"lineItems.quantity": {$lt: 10, $gt: 2}})
